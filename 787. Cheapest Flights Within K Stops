class Solution {
public:
    int mindist(map<int, vector<pair<int, int>>>& graph, int curr, int dst,
                int k, vector<vector<int>>& dp) {

        if (curr == dst) {
            return 0;
        }
        if (dp[curr][k] != -1) {
            return dp[curr][k];
        }
        if (k == 0) {
            return INT_MAX;
        }
        int mn = INT_MAX;
        for (int i = 0; i < graph[curr].size(); i++) {

            int dt = mindist(graph, graph[curr][i].first, dst, k - 1, dp);
            if (dt != INT_MAX) {

                mn = min(mn, dt + graph[curr][i].second);
            }
        }
        return dp[curr][k] = mn;
    }
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst,
                          int k) {

        vector<vector<int>> dp(n + 2, vector<int>(n + 2, -1));
        map<int, vector<pair<int, int>>> graph;
        for (int i = 0; i < flights.size(); i++) {
            graph[flights[i][0]].push_back({flights[i][1], flights[i][2]});
        }
        int ans = mindist(graph, src, dst, k + 1, dp);
        return ans == INT_MAX ? -1 : ans;
    }
};
