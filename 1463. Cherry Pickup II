class Solution {

public:
    int findsum(vector<vector<int>>& v,int m,int n,int i1,int j1,int i2,int j2,vector<vector<vector<int>>>&dp){
        if(i1<0 || j1<0 || i2<0 || j2<0 || i1>=m || i2>=m || j1>=n || j2>=n){
            return 0;                // if any robot is out of grid return 0
        }

        if(dp[i1][j1][j2]!=-1){
            return dp[i1][j1][j2]; // if any case is previously computed then return its answer from dp vector
        }

           int sum=0;
           for(int col1=j1-1;col1<=j1+1 && col1<n;col1++){
                for(int col2=j2-1;col2<=j2+1 && col2<n;col2++){
               
               sum=max(sum,findsum(v,m,n,i1+1,col1,i2+1,col2,dp));   // try out all combinations of robot1 and robot2
           }
               
           }
        if(i1==i2 && j1==j2){
           return dp[i1][j1][j2]=sum+v[i1][j1];  // if positons are same then only one robot can pickup the cherries so add count of cherries one time only
        }
        
            return dp[i1][j1][j2]=sum+v[i1][j1]+v[i2][j2];  // else add count of cherries from both robot's positions
        

    }
    int cherryPickup(vector<vector<int>>& v) {
        int m=v.size(),n=v[0].size();
        int i1=0,j1=0,i2=0,j2=n-1;
        vector<vector<vector<int>>>dp(m+10,vector<vector<int>>(n+10,vector<int>(n+10,-1))); // creating 3d dp vector [row of robot,coloum of robot1,column of robot2] , row of both robots will always remain same so store it only one time
        return findsum(v,m,n,i1,j1,i2,j2,dp);
    }
};
